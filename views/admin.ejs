<div class="card shadow-sm mb-4">
    <div class="card-header bg-light d-flex justify-content-between align-items-center">
        <h4 class="mb-0">
            <i class="fas fa-users-cog me-2"></i>Gestión de Usuarios
        </h4>
        <% if (permittedRoutes.includes('/admin/add')) { %>
            <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#userModal" id="addUserBtn">
                <i class="fas fa-user-plus me-1"></i> Agregar
            </button>
        <% } %>
    </div>
    <div class="card-body">
        <% if (errorMessage) { %>
            <div class="alert alert-danger" role="alert">
                <%= errorMessage %>
            </div>
        <% } %>
        <div class="table-responsive">
            <table id="usersTable" class="table table-hover table-bordered">
                <thead class="table-light">
                    <tr>
                        <th>Nombre</th>
                        <th>Email</th>
                        <th>Rol</th>
                        <% if (permittedRoutes.includes('/admin/update') || permittedRoutes.includes('/admin/delete')) { %>
                            <th class="text-center">Acciones</th>
                        <% } %>
                    </tr>
                </thead>
                <tbody>
                    <% users.forEach(user => { %>
                    <tr>
                        <td><%= user.nombre %></td>
                        <td><%= user.email %></td>
                        <td><%= user.rol_nombre %></td>
                        <% if (permittedRoutes.includes('/admin/update') || permittedRoutes.includes('/admin/delete')) { %>
                            <td class="text-center">
                                <% if (permittedRoutes.includes('/admin/update')) { %>
                                    <button type="button" class="btn btn-primary btn-sm edit-btn" data-bs-toggle="modal" data-bs-target="#userModal" data-id="<%= user.id_usuario %>">
                                        <i class="fa-solid fa-pen-to-square"></i>
                                    </button>
                                <% } %>
                                <% if (permittedRoutes.includes('/admin/delete')) { %>
                                    <button class="btn btn-danger btn-sm delete-btn" data-id="<%= user.id_usuario %>" data-entity="admin">
                                        <i class="fa-solid fa-trash"></i>
                                    </button>
                                <% } %>
                            </td>
                        <% } %>
                    </tr>
                    <% }) %>
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Modal para Usuarios -->
<div class="modal fade" id="userModal" tabindex="-1" aria-labelledby="userModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="userModalLabel">Agregar Usuario</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="userForm">
                    <input type="hidden" id="id_usuario" name="id_usuario">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="nombre" class="form-label">Nombre</label>
                            <input type="text" class="form-control" id="nombre" name="nombre" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="email" class="form-label">Correo Electrónico</label>
                            <input type="email" class="form-control" id="email" name="email" required>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="contraseña" class="form-label">Contraseña</label>
                            <input type="password" class="form-control" id="contraseña" name="contraseña">
                            <small class="form-text text-muted">Dejar en blanco para no cambiar</small>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="confirmarContraseña" class="form-label">Confirmar Contraseña</label>
                            <input type="password" class="form-control" id="confirmarContraseña" name="confirmarContraseña">
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="id_rol" class="form-label">Rol</label>
                        <select class="form-select" id="id_rol" name="id_rol" required>
                            <% roles.forEach(rol => { %>
                                <option value="<%= rol.id_rol %>"><%= rol.nombre %></option>
                            <% }); %>
                        </select>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                        <button type="submit" class="btn btn-primary">Guardar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const userModal = document.getElementById('userModal');
        const userForm = document.getElementById('userForm');
        const modalTitle = document.getElementById('userModalLabel');
        const passwordField = document.getElementById('contraseña');

        const openModal = (isEdit, userId = null) => {
            userForm.reset();
            document.getElementById('id_usuario').value = '';
            passwordField.required = !isEdit;
            modalTitle.textContent = isEdit ? 'Editar Usuario' : 'Agregar Usuario';

            if (isEdit && userId) {
                fetch(`/api/admin/users/${userId}`, {
                    headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }
                })
                .then(response => {
                    if (!response.ok) throw new Error('Error al cargar datos del usuario.');
                    return response.json();
                })
                .then(user => {
                    document.getElementById('id_usuario').value = user.id_usuario;
                    document.getElementById('nombre').value = user.nombre;
                    document.getElementById('email').value = user.email;
                    document.getElementById('id_rol').value = user.id_rol;
                })
                .catch(error => Swal.fire('Error', error.message, 'error'));
            }
        };

        document.getElementById('addUserBtn').addEventListener('click', () => openModal(false));

        document.querySelectorAll('.edit-btn').forEach(button => {
            button.addEventListener('click', (event) => {
                const userId = event.currentTarget.getAttribute('data-id');
                openModal(true, userId);
            });
        });

        userForm.addEventListener('submit', async (event) => {
            event.preventDefault();

            const userId = document.getElementById('id_usuario').value;
            const url = userId ? '/admin/update' : '/admin/add';
            const formData = new FormData(userForm);
            const body = new URLSearchParams(formData);

            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    body: body
                });

                const result = await response.json();

                if (result.success) {
                    const bootstrapModal = bootstrap.Modal.getInstance(userModal);
                    bootstrapModal.hide();
                    await Swal.fire('¡Éxito!', result.message, 'success');
                    window.location.reload();
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                Swal.fire('Error', error.message, 'error');
            }
        });



        new DataTable('#usersTable', {
            layout: {
                topStart: {
                    buttons: [
                        { extend: 'excelHtml5', text: '<i class="fas fa-file-excel"></i> Excel', titleAttr: 'Exportar a Excel', className: 'btn btn-success' },
                        { extend: 'pdfHtml5', text: '<i class="fas fa-file-pdf"></i> PDF', titleAttr: 'Exportar a PDF', className: 'btn btn-danger' }
                    ]
                }
            },
            language: { url: 'https://cdn.datatables.net/plug-ins/1.11.5/i18n/es-ES.json' }
        });
    });
</script>