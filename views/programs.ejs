<div class="card shadow-sm mb-4">
    <div class="card-header bg-light d-flex justify-content-between align-items-center">
        <h4 class="mb-0">
            <i class="fas fa-graduation-cap me-2"></i>Gestión de Programas
        </h4>
        <% if (permittedRoutes.includes('/programs/add')) { %>
            <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#programModal" id="addProgramBtn">
                <i class="fas fa-plus me-1"></i> Agregar
            </button>
        <% } %>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table id="programsTable" class="table table-hover table-bordered">
                <thead class="table-light">
                    <tr>
                        <th class="text-center">#</th>
                        <th>Nombre del Programa</th>
                        <% if (permittedRoutes.includes('/programs/update') || permittedRoutes.includes('/programs/delete')) { %>
                            <th class="text-center">Acciones</th>
                        <% } %>
                    </tr>
                </thead>
                <tbody>
                    <% programs.forEach((program, index) => { %>
                    <tr>
                        <td class="text-center"><%= index + 1 %></td>
                        <td><%= program.nombre_programa %></td>
                        <% if (permittedRoutes.includes('/programs/update') || permittedRoutes.includes('/programs/delete')) { %>
                            <td class="text-center">
                                <% if (permittedRoutes.includes('/programs/update')) { %>
                                    <button type="button" class="btn btn-primary btn-sm edit-btn" data-bs-toggle="modal" data-bs-target="#programModal" data-id="<%= program.id_programa %>">
                                        <i class="fa-solid fa-pen-to-square"></i>
                                    </button>
                                <% } %>
                                <% if (permittedRoutes.includes('/programs/delete')) { %>
                                    <button class="btn btn-danger btn-sm delete-btn" data-id="<%= program.id_programa %>" data-entity="programs">
                                        <i class="fa-solid fa-trash"></i>
                                    </button>
                                <% } %>
                            </td>
                        <% } %>
                    </tr>
                    <% }) %>
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Modal para Programas -->
<div class="modal fade" id="programModal" tabindex="-1" aria-labelledby="programModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="programModalLabel">Agregar Programa</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="programForm">
                    <input type="hidden" id="id_programa" name="id_programa">
                    <div class="mb-3">
                        <label for="nombre_programa" class="form-label">Nombre del Programa</label>
                        <input type="text" class="form-control" id="nombre_programa" name="nombre_programa" required>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                        <button type="submit" class="btn btn-primary">Guardar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const programModal = document.getElementById('programModal');
        const programForm = document.getElementById('programForm');
        const modalTitle = document.getElementById('programModalLabel');
        const addProgramBtn = document.getElementById('addProgramBtn');

        // Limpiar el modal al abrir para agregar
        if (addProgramBtn) {
            addProgramBtn.addEventListener('click', () => {
                programForm.reset();
                document.getElementById('id_programa').value = '';
                modalTitle.textContent = 'Agregar Programa';
            });
        }

        // Cargar datos al abrir para editar
        programModal.addEventListener('show.bs.modal', async (event) => {
            const button = event.relatedTarget;
            if (button && button.classList.contains('edit-btn')) {
                const programId = button.getAttribute('data-id');
                modalTitle.textContent = 'Editar Programa';

                try {
                    const response = await fetch(`/api/programs/${programId}`, {
                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }
                    });
                    if (!response.ok) throw new Error('Error al cargar los datos del programa.');

                    const program = await response.json();
                    document.getElementById('id_programa').value = program.id_programa;
                    document.getElementById('nombre_programa').value = program.nombre_programa;
                } catch (error) {
                    console.error(error);
                    Swal.fire('Error', error.message, 'error');
                }
            }
        });

        // Manejar el envío del formulario
        programForm.addEventListener('submit', async (event) => {
            event.preventDefault();

            const programId = document.getElementById('id_programa').value;
            const url = programId ? '/programs/update' : '/programs/add';
            const formData = new FormData(programForm);
            const body = new URLSearchParams(formData);

            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    body: body
                });

                const result = await response.json();

                if (result.success) {
                    const bootstrapModal = bootstrap.Modal.getInstance(programModal);
                    bootstrapModal.hide();

                    await Swal.fire({
                        title: '¡Éxito!',
                        text: result.message,
                        icon: 'success',
                        timer: 1500,
                        showConfirmButton: false
                    });
                    
                    window.location.reload();
                } else {
                    throw new Error(result.message || 'Ocurrió un error al guardar el programa.');
                }
            } catch (error) {
                Swal.fire('Error', error.message, 'error');
            }
        });

        // DataTable
        new DataTable('#programsTable', {
            layout: {
                topStart: {
                    buttons: [
                        {
                            extend: 'excelHtml5',
                            text: '<i class="fas fa-file-excel"></i> Excel',
                            titleAttr: 'Exportar a Excel',
                            className: 'btn btn-success'
                        },
                        {
                            extend: 'pdfHtml5',
                            text: '<i class="fas fa-file-pdf"></i> PDF',
                            titleAttr: 'Exportar a PDF',
                            className: 'btn btn-danger'
                        }
                    ]
                }
            },
        });
    });
</script>
